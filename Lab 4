

--A. List all of the products provided by each supplier in alphabetical order with the least expensive
--products shown first for each supplier. Hint: Be sure to include the Product ID, Product Description,
--Supplier ID, Supplier Name, Vendor Part #, and Cost.


SELECT		P.ProductID, P.ProductDescription, S.SupplierID, S.SupplierName, PS.VendorPartID, PS.ProductCost
FROM		PRODUCT_t AS P, PRODUCT_SUPPLIER_t AS PS, SUPPLIER_t AS S
WHERE		P.ProductID = PS.ProductID
  AND		PS.SupplierID = S.SupplierID
ORDER BY	S.SupplierName, PS.ProductCost





--B. Which sales representative has the highest dollar amount in total sales? Hint: Provide the name and
--the total sales amount for that rep only. Do not include the information for other people, and do not list
--details about orders.


--SELECT		TOP 1 E.EmployeeFirstName + ' ' + E.EmployeeLastName AS SalesRep, SUM(PH.UnitPrice * OL.OrderQuantity) AS TotalSales
--FROM		EMPLOYEE_t AS E, CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL, PRICE_HISTORY_t AS PH
--WHERE		E.EmployeeID = C.SalesRepID
--AND			C.CustomerID = O.CustomerID
--AND			O.OrderID = OL.OrderID
--AND			OL.ProductID = PH.ProductID
--AND			O.OrderDate >= PH.StartDate
--AND			O.OrderDate <= PH.EndDate
--GROUP BY	E.EmployeeFirstName + ' ' + E.EmployeeLastName
--ORDER BY	TotalSales DESC


--C. List all of the sales reps and their total commission amounts in order of highest sales commission
--dollar amount first. Hint: Provide all of sales reps’ names and their total commission dollar amounts –
--imagine that you were going to write one check to each sales rep to pay their total commission amount,
--so be sure to produce that dollar amount. Extra Hint: Not all of the sales reps have sold any orders.

--NEED TO LIST ALLLLLLL THE SALES REPS
--SELECT		E.EmployeeFirstName + ' ' + E.EmployeeLastName AS SalesRep, SUM(PH.UnitPrice * OL.OrderQuantity * S.CommissionRate) AS TotalCommission
--FROM		EMPLOYEE_t AS E, SALES_REPRESENTATIVE_t AS S, CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL, PRICE_HISTORY_t AS PH
--WHERE		E.EmployeeID = S.EmployeeID
--AND			S.EmployeeID = C.SalesRepID
--AND			C.CustomerID = O.CustomerID
--AND			O.OrderID = OL.OrderID
--AND			OL.ProductID = PH.ProductID
--AND			O.OrderDate >= PH.StartDate
--AND			O.OrderDate <= PH.EndDate
--GROUP BY	E.EmployeeFirstName + ' ' + E.EmployeeLastName
--ORDER BY	TotalCommission DESC


--D. Which sales representative has sold the most products? Hint: Name of the sales rep and a number
--representing the total number of distinct products sold by that rep. This is the number of different
--products they have sold, not the quantity of any products.


--SELECT		E.EmployeeFirstName + ' ' + E.EmployeeLastName, COUNT(O.ProductID) AS CountOfProducts
--FROM		EMPLOYEE_t AS E, 
--			(
--			SELECT	DISTINCT C.SalesRepID, OL.ProductID
--			FROM	CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL
--			WHERE	C.CustomerID = O.CustomerID
--			AND		O.OrderID = OL.OrderID
--			) AS O
--WHERE		E.EmployeeID = O.SalesRepID
--GROUP BY	E.EmployeeFirstName + ' ' + E.EmployeeLastName
--ORDER BY	CountOfProducts DESC


--E. Which sales representative has generated the most profit for the company? Hint: Provide the name
--of the sales rep and the total profit amount only. This one SQL statement will have subqueries. You must
--determine the profitability of a product by subtracting its cost from its selling price and multiplying the
--difference by the quantity sold. Regarding the cost, many products are supplied by more than one
--suppler, and each supplier may provide a different cost, so when this occurs, use the least expensive cost
--in measuring your profitability.


--SELECT		TOP 1 E.EmployeeFirstName + ' ' + E.EmployeeLastName AS SalesRep, PP.ProductProfit * OL.OrderQuantity AS TotalProfit
--FROM		EMPLOYEE_t AS E, CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL, 
--			(
--			SELECT		PH.UnitPrice - MIN(PS.ProductCost) AS ProductProfit, PS.ProductID, PH.StartDate, PH.EndDate
--			FROM		PRODUCT_SUPPLIER_t AS PS, PRICE_HISTORY_t AS PH WHERE PS.ProductID = PH.ProductID
--			GROUP BY	PS.ProductID, PH.StartDate, PH.EndDate, PH.UnitPrice
--			) AS PP
--WHERE		E.EmployeeID = C.SalesRepID
--AND			C.CustomerID = O.CustomerID
--AND			O.OrderID = OL.OrderID
--AND			OL.ProductID = PP.ProductID
--AND			O.OrderDate >= PP.StartDate
--AND			O.OrderDate <= PP.EndDate
--ORDER BY	TotalProfit DESC


--F. Provide a listing of all of the details for each order. The report must be organized by sales rep, then
--alphabetically by each customer for that sales rep, and then by each Order ID for that customer. The
--listing must include the Sales Rep’s name, Customer Name, Order ID, Order Date, Due Date, Product ID,
--Product Description, Quantity Purchased, and Unit Price.


--SELECT		E.EmployeeFirstName + ' ' + E.EmployeeLastName AS SalesRep, C.CustomerName, O.OrderID, O.OrderDate, O.DueDate, OL.ProductID, P.ProductDescription, PS.PurchasedQuantity, PH.UnitPrice
--FROM		EMPLOYEE_t AS E, CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL, PRODUCT_t AS P, PRODUCT_SUPPLIER_t AS PS, PRICE_HISTORY_t AS PH
--WHERE		E.EmployeeID = C.SalesRepID
--AND			C.CustomerID = O.CustomerID
--AND			O.OrderID = OL.OrderID
--AND			OL.ProductID = P.ProductID
--AND			P.ProductID = PS.ProductID
--AND			P.ProductID = PH.ProductID
--AND			O.OrderDate >= PH.StartDate
--AND			O.OrderDate <= PH.EndDate


--G. List the suppliers that provide hack saws, and sort the list with the lowest prices first. Hint: Your SQL
--statement must look for a “Hack Saw”, and not some ProductID or PartID. Include the Supplier IDs,
--Supplier Names, Vendor Part #s, and cost.

--???????????????????????????
--SELECT		PS.SupplierID, S.SupplierName, PS.VendorPartID, PS.ProductCost, P.ProductDescription
--FROM		--FABRICATED_t AS F, 
--PRODUCT_t AS P, PRODUCT_SUPPLIER_t AS PS, SUPPLIER_t AS S
--WHERE		P.ProductDescription = 'HACK SAW'
----AND			F.ProductID = P.ProductID
--AND			P.ProductID = PS.ProductID
--AND			PS.SupplierID = S.SupplierID


--H. Show the components and cost of materials for fabricating a hack saw. Hint: Your SQL statement
--must look for a “Hack Saw”, and not some ProductID or PartID. Include the ProductID (really PartID),
--Product Description, and Quantity Used for each component of a hack saw.



--I. Which customer purchased the overall largest dollar amount? Hint: One name and the total dollar
--amount only – the result should be one record only.

--SELECT	TOP 1 C.CustomerName, TS.TotalSales
--FROM	CUSTOMER_t AS C,
--		(
--		SELECT		O.CustomerID, SUM(PH.UnitPrice) AS TotalSales
--		FROM		ORDER_t AS O, ORDER_LINE_t AS OL, PRICE_HISTORY_t AS PH
--		WHERE		O.OrderID = OL.OrderID
--		AND			OL.ProductID = PH.ProductID
--		AND			O.OrderDate >= PH.StartDate
--		AND			O.OrderDate <= PH.EndDate
--		GROUP BY	O.CustomerID
--		) AS TS
--WHERE	C.CustomerID = TS.CustomerID
--ORDER BY TS.TotalSales DESC


--J. Provide an inventory report based on ’17-MAY-2017’ that lists the most costly items first. Hint: The
--most costly item is the one in which the product (i.e., multiplication) of cost and quantity yields the
--largest value, in other words, the item that we have spent the most money on. Include Product ID,
--Product Description, Unit Price, Cost, Quantity Purchased, Amount Spent (the product of Quantity
--Purchased and Cost), Supplier ID, and Supplier Name.


--SELECT		P.ProductID, P.ProductDescription, PH.UnitPrice, PS.ProductCost, PS.PurchasedQuantity, PS.ProductCost * PS.PurchasedQuantity AS AmountSpent, PS.SupplierID, S.SupplierName
--FROM		PRODUCT_t AS P, PRODUCT_SUPPLIER_t AS PS, SUPPLIER_t AS S, PRICE_HISTORY_t AS PH
--WHERE		P.ProductID = PS.ProductID
--AND			PS.SupplierID = S.SupplierID
--AND			PH.ProductID = P.ProductID
--AND			'17-MAY-2017' BETWEEN StartDate AND EndDate
--ORDER BY	AmountSpent DESC


--K. Provide an inventory report based on ’17-MAY-2017’ that lists the most profitable items first. Hint:
--The most profitable item is the one in which the difference between the sales price and the purchase cost
--yields the largest value, in other words, the item that we can potentially make the most money on.
--Include Product ID, Product Description, Unit Price, Cost, Profit Margin (difference between price and
--cost), Supplier ID, and Supplier Name.


--SELECT		P.ProductID, P.ProductDescription, PH.UnitPrice, PS.ProductCost, PH.UnitPrice - PS.ProductCost AS ProfitMargin, PS.SupplierID, S.SupplierName
--FROM		PRODUCT_t AS P, PRODUCT_SUPPLIER_t AS PS, SUPPLIER_t AS S, PRICE_HISTORY_t AS PH
--WHERE		P.ProductID = PS.ProductID
--AND			PS.SupplierID = S.SupplierID
--AND			PH.ProductID = P.ProductID
--AND			'17-MAY-2017' BETWEEN StartDate AND EndDate
--ORDER BY	ProfitMargin DESC



--L. List all the employees in alphabetical order and each course they have completed in order of date
--completed. Hint: Include all employee names even if they didn’t complete any courses, course ID, course
--name, and date of completion. Also, think about the way to sort individuals by alphabetical order.


--SELECT		E.EmployeeFirstName + ' ' + E.EmployeeLastName AS EmployeeName, CC.CourseID, CC.CourseDescription AS CourseName, CC.CompletionDate
--FROM		EMPLOYEE_t AS E LEFT OUTER JOIN 
--			(
--			SELECT		EC.EmployeeID, EC.CompletionDate, EC.CourseID, C.CourseDescription
--			FROM		EMPLOYEE_COURSE_t AS EC, COURSE_t AS C
--			WHERE		EC.CourseID = C.CourseID
--			) AS CC 
--			ON E.EmployeeID = CC.EmployeeID
--ORDER BY	E.EmployeeLastName, E.EmployeeFirstName, CC.CompletionDate


--M. List the ProductIDs, product descriptions, and unit prices that are valid on July 14, 2015 for all
--products sorted by ProductID. Hint: Search for prices valid on ’14-JUL-2015’

--????????????????????????????????????????????????????
--SELECT		P.ProductID, P.ProductDescription, PH.UnitPrice
--FROM		PRODUCT_t AS P, PRICE_HISTORY_t AS PH
--WHERE		P.ProductID = PH.ProductID
--AND			'14-JUL-2015' BETWEEN StartDate AND EndDate
--ORDER BY	P.ProductID


--N. Who are the employees that report directly to Sam Drucker’s manager? Provide the information by
--their names in alphabetical order, and include their Employee IDs and Job Titles. Hint: Your SQL
--statement must look for “Sam” and “Drucker”, and not some EmployeeID that was not given to you in
--the problem statement.


--SELECT		EmployeeFirstName + ' ' + EmployeeLastName AS EmployeeName, EmployeeID, EmployeeJobTitle
--FROM		EMPLOYEE_t
--WHERE		ManagerID IN
--			(
--			SELECT	ManagerID 
--			FROM	EMPLOYEE_t 
--			WHERE	EmployeeFirstName = 'Sam' 
--			AND		EmployeeLastName = 'Drucker'
--			)
--ORDER BY	EmployeeLastName, EmployeeFirstName


--O. What is the information relevant to order ID 1527? I want to know the Customer Name, Customer
--City, State, Sales Rep’s Name, Order Date, Due Date, Ship Date, Customer PO Number, ProductID,
--Product Description, Order Quantity, and Unit Price. Hint: Be sure that every item on the order is
--included and be sure that the price is valid for that order date.


--SELECT		C.CustomerName, C.CustomerCity, C.CustomerState, E.EmployeeFirstName + ' ' + E.EmployeeLastName AS SalesRep, 
--			O.OrderDate, O.DueDate, O.ShipDate, O.CustomerPONumber, OL.ProductID, P.ProductDescription, OL.OrderQuantity, PH.UnitPrice
--FROM		EMPLOYEE_t AS E, CUSTOMER_t AS C, ORDER_t AS O, ORDER_LINE_t AS OL, PRODUCT_t AS P, PRICE_HISTORY_t AS PH
--WHERE		E.EmployeeID = C.SalesRepID
--AND			C.CustomerID = O.CustomerID
--AND			O.OrderID = OL.OrderID
--AND			OL.ProductID = P.ProductID
--AND			P.ProductID = PH.ProductID
--AND			O.OrderDate >= PH.StartDate
--AND			O.OrderDate <= PH.EndDate
--AND			O.OrderID = 1527
